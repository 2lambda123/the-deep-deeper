AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an S3 bucket, Cloudfront to host Deep frontend

Parameters:
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
    AllowedPattern: (staging|prod)
  HostedZoneId:
    Description: 'The Route 53 hosted zone ID to create the domain in (e.g. Z2FDTNDATAQYW2).'
    Type: String

Mappings:
  EnvMaps:
    staging:
      Domain: staging.thedeep.io
      BucketName: deep-staging-client
      UpdatePolicyName: deep-staging-client-update-policy
      UpdateIamUserName: deep-staging-client-update-user
    prod:
      Domain: app.thedeep.io
      BucketName: deep-prod-client
      UpdatePolicyName: deep-prod-client-update-policy
      UpdateIamUserName: deep-prod-client-update-user

Resources:
  CloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${Env}-SetHttpSecurityHeaders'
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var response = event.response;
          var headers = response.headers;
          // CSP Polices
          var csp_policy = {
              'default-src': [
                  "'self'", "'unsafe-eval'", "'unsafe-inline'" ,
                  '*.thedeep.io', '*.*.thedeep.io', 'blob:', 'data:',
                  // buckets
                  'deeper-alpha.s3.amazonaws.com', 'deeper-prod-media.s3.amazonaws.com', 'nightly.thedeep.io.s3.amazonaws.com',
                  'deeper-alpha-static.s3.amazonaws.com', 'deeper-beta-static.s3.amazonaws.com',
                  // mapbox
                  'api.mapbox.com', 'api.tiles.mapbox.com', 'events.mapbox.com',
                  // google
                  'fonts.gstatic.com', 'fonts.googleapis.com', 'apis.google.com', 'www.google-analytics.com', 'www.google.com', 'www.gstatic.com', 'stats.g.doubleclick.net',
                  'cdnjs.cloudflare.com',
                  'maxcdn.bootstrapcdn.com',
                  'deephelp.zendesk.com', 'ekr.zdassets.com',
                  'sentry.io',
                  'static.zdassets.com',
                  'www.dropbox.com',
              ],
              'report-uri': ['https://thedeep.report-uri.com/r/d/csp/wizard'],
          };
          var csp_policy_value = Object.keys(csp_policy).map(src => `${src} ${csp_policy[src].join(' ')};`).join(' ');

          // Set HTTP security headers
          // Since JavaScript doesn't allow for hyphens in variable names, we use the dict['key'] notation
          // headers['content-security-policy'] = { value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"};
          headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'};
          headers['x-content-type-options'] = { value: 'nosniff'};
          headers['x-frame-options'] = {value: 'DENY'};
          headers['x-xss-protection'] = {value: '1; mode=block'};
          headers['referrer-policy'] = {value: 'same-origin'};
          headers['content-security-policy-report-only'] = {value: csp_policy_value};
          // return response with security headers
          return response;
        }
      FunctionConfig:
        Comment: Set HTTP security headers
        Runtime: cloudfront-js-1.0

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [EnvMaps, !Ref Env, BucketName]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]

  AcmCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !FindInMap [EnvMaps, !Ref Env, Domain]
      DomainValidationOptions:
        - DomainName: !FindInMap [EnvMaps, !Ref Env, Domain]
          HostedZoneId: !Ref 'HostedZoneId'
      ValidationMethod: DNS

  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
          - !FindInMap [EnvMaps, !Ref Env, Domain]
        DefaultCacheBehavior:
          FunctionAssociations:
            - EventType: viewer-response
              FunctionARN: !GetAtt CloudFrontFunction.FunctionMetadata.FunctionARN
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificate
          SslSupportMethod: sni-only

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Comment: CNAME redirect custom name to CloudFront distribution
      Name: !FindInMap [EnvMaps, !Ref Env, Domain]
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt [WebsiteCloudfront, DomainName]

  ClientUpdateIamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !FindInMap [EnvMaps, !Ref Env, UpdatePolicyName]
      Description: Policy for to update static files and invalidate CloudFront cache
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - cloudfront:CreateInvalidation
            Effect: Allow
            Resource:
              - !Join ['', [!Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/', !Ref 'WebsiteCloudfront']]
          - Action:
              - s3:DeleteObject
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket']]
              - !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]

  ClientUpdateIamUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !FindInMap [EnvMaps, !Ref Env, UpdateIamUserName]
      ManagedPolicyArns:
        - !Ref ClientUpdateIamPolicy

Outputs:
  BucketName:
    Value: !Ref 'WebsiteBucket'
    Description: Name of S3 bucket to hold website content
  CloudfrontEndpoint:
    Value: !GetAtt [WebsiteCloudfront, DomainName]
    Description: Endpoint for Cloudfront distribution
  CloudfrontDistributionId:
    Value: !Ref 'WebsiteCloudfront'
    Description: ID for Cloudfront distribution
  DNSRecord:
    Value: !Ref DNSRecord
    Description: Custom DNS Record
  UpdatePolicyName:
    Description: Policy to be used to update client files
    Value: !FindInMap [EnvMaps, !Ref Env, UpdatePolicyName]
